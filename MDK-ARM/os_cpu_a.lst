


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                              uC/OS-III
                       
    3 00000000         ;                                        The Real-Time K
                       ernel
    4 00000000         ;
    5 00000000         ;                    Copyright 2009-2022 Silicon Laborat
                       ories Inc. www.silabs.com
    6 00000000         ;
    7 00000000         ;                                 SPDX-License-Identifie
                       r: APACHE-2.0
    8 00000000         ;
    9 00000000         ;               This software is subject to an open sour
                       ce license and is distributed by
   10 00000000         ;                Silicon Laboratories Inc. pursuant to t
                       he terms of the Apache License,
   11 00000000         ;                    Version 2.0 available at www.apache
                       .org/licenses/LICENSE-2.0.
   12 00000000         ;
   13 00000000         ;*******************************************************
                       *************************************************
   14 00000000         
   15 00000000         ;*******************************************************
                       *************************************************
   16 00000000         ;
   17 00000000         ;                                             ARMv7-M Po
                       rt
   18 00000000         ;
   19 00000000         ; File      : os_cpu_a.asm
   20 00000000         ; Version   : V3.08.02
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         ; For       : ARMv7-M Cortex-M
   23 00000000         ; Mode      : Thumb-2 ISA
   24 00000000         ; Toolchain : ARM C Compiler
   25 00000000         ;*******************************************************
                       *************************************************
   26 00000000         ; Note(s)   : (1) This port supports the ARM Cortex-M3, 
                       Cortex-M4 and Cortex-M7 architectures.
   27 00000000         ;             (2) It has been tested with the following 
                       Hardware Floating Point Unit.
   28 00000000         ;                 (a) Single-precision: FPv4-SP-D16-M an
                       d FPv5-SP-D16-M
   29 00000000         ;                 (b) Double-precision: FPv5-D16-M
   30 00000000         ;*******************************************************
                       *************************************************
   31 00000000         ;
   32 00000000         
   33 00000000         ;*******************************************************
                       *************************************************
   34 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   35 00000000         ;*******************************************************
                       *************************************************
   36 00000000         
   37 00000000         ; External references.
   38 00000000                 IMPORT           OSPrioCur
   39 00000000                 IMPORT           OSPrioHighRdy



ARM Macro Assembler    Page 2 


   40 00000000                 IMPORT           OSTCBCurPtr
   41 00000000                 IMPORT           OSTCBHighRdyPtr
   42 00000000                 IMPORT           OSIntExit
   43 00000000                 IMPORT           OSTaskSwHook
   44 00000000                 IMPORT           OS_CPU_ExceptStkBase
   45 00000000                 IMPORT           OS_KA_BASEPRI_Boundary
   46 00000000         
   47 00000000         
   48 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   49 00000000                 EXPORT           OSCtxSw
   50 00000000                 EXPORT           OSIntCtxSw
   51 00000000                 EXPORT           OS_CPU_PendSVHandler
   52 00000000         
   53 00000000         
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         ;                                               EQUATES
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         
   58 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   59 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   60 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   61 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   62 00000000         
   63 00000000         
   64 00000000         ;*******************************************************
                       *************************************************
   65 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   66 00000000         ;*******************************************************
                       *************************************************
   67 00000000         
   68 00000000                 PRESERVE8
   69 00000000                 THUMB
   70 00000000         
   71 00000000                 AREA             CODE, CODE, READONLY
   72 00000000         
   73 00000000         
   74 00000000         
   75 00000000         ;*******************************************************
                       *************************************************
   76 00000000         ;                                         START MULTITAS
                       KING
   77 00000000         ;                                      void OSStartHighR



ARM Macro Assembler    Page 3 


                       dy(void)
   78 00000000         ;
   79 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   80 00000000         ;              the first task to start.
   81 00000000         ;
   82 00000000         ;           2) During task execution, PSP is used as the
                        stack pointer.
   83 00000000         ;              When an exception occurs, the core will s
                       witch to MSP until the exception return.
   84 00000000         ;
   85 00000000         ;           3) OSStartHighRdy() MUST:
   86 00000000         ;              a) Setup PendSV exception priority to low
                       est;
   87 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   88 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
   89 00000000         ;              d) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   90 00000000         ;              e) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
   91 00000000         ;              f) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->StkPtr;
   92 00000000         ;              g) Restore R0-R11 and R14 from new proces
                       s stack;
   93 00000000         ;              h) Enable interrupts (tasks will run with
                        interrupts enabled).
   94 00000000         ;*******************************************************
                       *************************************************
   95 00000000         
   96 00000000         OSStartHighRdy
   97 00000000 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   98 00000002 F64E 5022 
              F2CE 0000        MOV32            R0, NVIC_SYSPRI14 ; Set the Pen
                                                            dSV exception prior
                                                            ity
   99 0000000A F240 01FF 
              F2C0 0100        MOV32            R1, NVIC_PENDSV_PRI
  100 00000012 7001            STRB             R1, [R0]
  101 00000014         
  102 00000014 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  103 00000016 F380 8809       MSR              PSP, R0
  104 0000001A         
  105 0000001A F240 0000 
              F2C0 0000        MOV32            R0, OS_CPU_ExceptStkBase ; Init
                                                            ialize the MSP to t
                                                            he OS_CPU_ExceptStk
                                                            Base
  106 00000022 6801            LDR              R1, [R0]
  107 00000024 F381 8808       MSR              MSP, R1
  108 00000028         
  109 00000028 F7FF FFFE       BL               OSTaskSwHook ; Call OSTaskSwHoo
                                                            k() for FPU Push & 
                                                            Pop



ARM Macro Assembler    Page 4 


  110 0000002C         
  111 0000002C F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  112 00000034 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  113 0000003C 780A            LDRB             R2, [R1]
  114 0000003E 7002            STRB             R2, [R0]
  115 00000040         
  116 00000040 F240 0000 
              F2C0 0000        MOV32            R0, OSTCBCurPtr ; OSTCBCurPtr =
                                                             OSTCBHighRdyPtr;
  117 00000048 F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr
  118 00000050 680A            LDR              R2, [R1]
  119 00000052 6002            STR              R2, [R0]
  120 00000054         
  121 00000054 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  122 00000056 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  123 0000005A         
  124 0000005A F3EF 8014       MRS              R0, CONTROL
  125 0000005E F040 0002       ORR              R0, R0, #2
  126 00000062 F020 0004       BIC              R0, R0, #4  ; Clear FPCA bit to
                                                             indicate FPU is no
                                                            t in use
  127 00000066 F380 8814       MSR              CONTROL, R0
  128 0000006A F3BF 8F6F       ISB                          ; Sync instruction 
                                                            stream
  129 0000006E         
  130 0000006E E8BD 4FF0       LDMFD            SP!, {R4-R11, LR} ; Restore r4-
                                                            11, lr from new pro
                                                            cess stack
  131 00000072 BC0F            LDMFD            SP!, {R0-R3} ; Restore r0, r3
  132 00000074 E8BD 5000       LDMFD            SP!, {R12, LR} 
                                                            ; Load R12 and LR
  133 00000078 BC06            LDMFD            SP!, {R1, R2} ; Load PC and dis
                                                            card xPSR
  134 0000007A B662            CPSIE            I
  135 0000007C 4708            BX               R1
  136 0000007E         
  137 0000007E         
  138 0000007E         ;*******************************************************
                       *************************************************
  139 0000007E         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  140 0000007E         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  141 0000007E         ;
  142 0000007E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  143 0000007E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  144 0000007E         ;
  145 0000007E         ;           2) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  146 0000007E         ;              the result of an interrupt.  This functio



ARM Macro Assembler    Page 5 


                       n simply triggers a PendSV exception which will
  147 0000007E         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  148 0000007E         ;*******************************************************
                       *************************************************
  149 0000007E         
  150 0000007E         OSCtxSw
  151 0000007E         OSIntCtxSw
  152 0000007E 4826            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  153 00000080 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  154 00000084 6001            STR              R1, [R0]
  155 00000086 4770            BX               LR
  156 00000088         
  157 00000088         
  158 00000088         ;*******************************************************
                       *************************************************
  159 00000088         ;                                       HANDLE PendSV EX
                       CEPTION
  160 00000088         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  161 00000088         ;
  162 00000088         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  163 00000088         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M auto-saves half of the
  164 00000088         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  165 00000088         ;              saving of R4-R11 & R14 is required and fi
                       xing up the stack pointers. Using the PendSV exception
  166 00000088         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  167 00000088         ;              a thread or occurs due to an interrupt or
                        exception.
  168 00000088         ;
  169 00000088         ;           2) Pseudo-code is:
  170 00000088         ;              a) Get the process SP
  171 00000088         ;              b) Save remaining regs r4-r11 & r14 on pr
                       ocess stack;
  172 00000088         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  173 00000088         ;              d) Call OSTaskSwHook();
  174 00000088         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  175 00000088         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  176 00000088         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  177 00000088         ;              h) Restore R4-R11 and R14 from new proces
                       s stack;
  178 00000088         ;              i) Perform exception return which will re
                       store remaining context.
  179 00000088         ;
  180 00000088         ;           3) On entry into PendSV handler:
  181 00000088         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  182 00000088         ;                 xPSR, PC, LR, R12, R0-R3



ARM Macro Assembler    Page 6 


  183 00000088         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  184 00000088         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  185 00000088         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  186 00000088         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  187 00000088         ;
  188 00000088         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  189 00000088         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  190 00000088         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  191 00000088         ;
  192 00000088         ;           5) Increasing priority using a write to BASE
                       PRI does not take effect immediately.
  193 00000088         ;              (a) IMPLICATION  This erratum means that 
                       the instruction after an MSR to boost BASEPRI
  194 00000088         ;                  might incorrectly be preempted by an 
                       insufficient high priority exception.
  195 00000088         ;
  196 00000088         ;              (b) WORKAROUND  The MSR to boost BASEPRI 
                       can be replaced by the following code sequence:
  197 00000088         ;
  198 00000088         ;                  CPSID i
  199 00000088         ;                  MSR to BASEPRI
  200 00000088         ;                  DSB
  201 00000088         ;                  ISB
  202 00000088         ;                  CPSIE i
  203 00000088         ;*******************************************************
                       *************************************************
  204 00000088         
  205 00000088         OS_CPU_PendSVHandler
  206 00000088 B672            CPSID            I           ; Cortex-M7 errata 
                                                            notice. See Note #5
                                                            
  207 0000008A F240 0200 
              F2C0 0200        MOV32            R2, OS_KA_BASEPRI_Boundary ; Se
                                                            t BASEPRI priority 
                                                            level required for 
                                                            exception preemptio
                                                            n
  208 00000092 6811            LDR              R1, [R2]
  209 00000094 F381 8811       MSR              BASEPRI, R1
  210 00000098 F3BF 8F4F       DSB
  211 0000009C F3BF 8F6F       ISB
  212 000000A0 B662            CPSIE            I
  213 000000A2         
  214 000000A2 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  215 000000A6                 IF               {FPU} != "SoftVFP"
  216 000000A6         ; Push high vfp registers if the task is using the FPU c
                       ontext
  217 000000A6 F01E 0F10       TST              R14, #0x10
  218 000000AA BF08            IT               EQ
  219 000000AC ED20 8A10       VSTMDBEQ         R0!, {S16-S31}
  220 000000B0                 ENDIF



ARM Macro Assembler    Page 7 


  221 000000B0         
  222 000000B0 E920 4FF0       STMFD            R0!, {R4-R11, R14} ; Save remai
                                                            ning regs r4-11, R1
                                                            4 on process stack
  223 000000B4         
  224 000000B4 F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr ; OSTCBCurPtr->
                                                            StkPtr = SP;
  225 000000BC 6829            LDR              R1, [R5]
  226 000000BE 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  227 000000C0         
  228 000000C0         ; At this point, entire context of process has been save
                       d
  229 000000C0 4674            MOV              R4, LR      ; Save LR exc_retur
                                                            n value
  230 000000C2 F7FF FFFE       BL               OSTaskSwHook ; Call OSTaskSwHoo
                                                            k() for FPU Push & 
                                                            Pop
  231 000000C6         
  232 000000C6 F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  233 000000CE F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  234 000000D6 780A            LDRB             R2, [R1]
  235 000000D8 7002            STRB             R2, [R0]
  236 000000DA         
  237 000000DA F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
  238 000000E2 680A            LDR              R2, [R1]
  239 000000E4 602A            STR              R2, [R5]
  240 000000E6         
  241 000000E6 F044 0E04       ORR              LR,  R4, #0x04 ; Ensure excepti
                                                            on return uses proc
                                                            ess stack
  242 000000EA 6810            LDR              R0,  [R2]   ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  243 000000EC E8B0 4FF0       LDMFD            R0!, {R4-R11, R14} ; Restore r4
                                                            -11, R14 from new p
                                                            rocess stack
  244 000000F0         
  245 000000F0                 IF               {FPU} != "SoftVFP"
  246 000000F0         ; Pop the high vfp registers if the next task is using t
                       he FPU context
  247 000000F0 F01E 0F10       TST              R14, #0x10
  248 000000F4 BF08            IT               EQ
  249 000000F6 ECB0 8A10       VLDMIAEQ         R0!, {S16-S31}
  250 000000FA                 ENDIF
  251 000000FA         
  252 000000FA F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  253 000000FE         
  254 000000FE F240 0200 
              F2C0 0200        MOV32            R2, #0      ; Restore BASEPRI p



ARM Macro Assembler    Page 8 


                                                            riority level to 0
  255 00000106 B672            CPSID            I           ; Cortex-M7 errata 
                                                            notice. See Note #5
                                                            
  256 00000108 F382 8811       MSR              BASEPRI, R2
  257 0000010C F3BF 8F4F       DSB
  258 00000110 F3BF 8F6F       ISB
  259 00000114 B662            CPSIE            I
  260 00000116 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  261 00000118         
  262 00000118                 ALIGN                        ; Removes warning[A
                                                            1581W]: added <no_p
                                                            adbytes> of padding
                                                             at <address>
  263 00000118         
  264 00000118                 END
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7.fp.sp --apcs=
interwork --depend=x7pro_driver\os_cpu_a.d -ox7pro_driver\os_cpu_a.o -I.\RTE\_X
7Pro_Driver -IC:\Users\19114\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core
\Include -IC:\Users\19114\AppData\Local\Arm\Packs\Keil\STM32H7xx_DFP\3.0.0\Driv
ers\CMSIS\Device\ST\STM32H7xx\Include --predefine="__UVISION_VERSION SETA 528" 
--predefine="_RTE_ SETA 1" --predefine="STM32H743xx SETA 1" --list=os_cpu_a.lst
 ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 71 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      None
Comment: CODE unused
OSCtxSw 0000007E

Symbol: OSCtxSw
   Definitions
      At line 150 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
   Uses
      At line 49 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000007E

Symbol: OSIntCtxSw
   Definitions
      At line 151 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
   Uses
      At line 50 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 96 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 48 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000088

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 205 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
   Uses
      At line 51 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 58 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 152 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
Comment: NVIC_INT_CTRL used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 61 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 153 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
Comment: NVIC_PENDSVSET used once
NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 60 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 99 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 59 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 98 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 42 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 38 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 111 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
      At line 232 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 39 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 112 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
      At line 233 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm

OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 40 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 116 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
      At line 224 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 41 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 117 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
      At line 237 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm

OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 43 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 109 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
      At line 230 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm

OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 44 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 105 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
OS_KA_BASEPRI_Boundary 00000000

Symbol: OS_KA_BASEPRI_Boundary
   Definitions
      At line 45 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os_
cpu_a.asm
   Uses
      At line 207 in file ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM\os
_cpu_a.asm
Comment: OS_KA_BASEPRI_Boundary used once
8 symbols
353 symbols in table
